// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  phone         String?
  whatsappPhone String?  @map("whatsappPhone")
  passwordHash  String?  @map("passwordHash")
  role          UserRole @default(OPERATOR)
  isActive      Boolean  @default(true) @map("isActive")
  loginEnabled  Boolean  @default(true) @map("loginEnabled")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")

  // Relations
  orders              Order[]                 @relation("UserOrders")
  workerOrders        Order[]                 @relation("WorkerOrders")
  materialMovements   MaterialMovement[]
  progressReports     ProgressReport[]
  orderLinks          OrderLink[]
  statusChanges       StatusChange[]          @relation("StatusChangedBy")
  createdAlerts       MaterialPurchaseAlert[] @relation("AlertCreatedBy")
  resolvedAlerts      MaterialPurchaseAlert[] @relation("AlertResolvedBy")
  createdContactNotes ContactNote[]           @relation("ContactNoteCreatedBy")

  @@map("users")
}

model Material {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  code           String   @unique
  unit           String   @default("pcs")
  qtyOnHand      Decimal  @default(0) @db.Decimal(10, 3)
  minStock       Decimal  @default(0) @db.Decimal(10, 3)
  maxStock       Decimal  @default(0) @db.Decimal(10, 3)
  reorderPoint   Decimal  @default(0) @db.Decimal(10, 3)
  reorderQty     Decimal  @default(0) @db.Decimal(10, 3)
  location       String?
  attributeType  String?  @map("attributeType")
  attributeValue String?  @map("attributeValue")
  isActive       Boolean  @default(true) @map("isActive")
  createdAt      DateTime @default(now()) @map("createdAt")
  updatedAt      DateTime @updatedAt @map("updatedAt")

  // Relations
  materialMovements  MaterialMovement[]
  remainingMaterials RemainingMaterial[]
  products           Product[]
  purchaseAlerts     MaterialPurchaseAlert[]
  purchaseLogs       PurchaseLog[]

  @@map("materials")
}

model Product {
  id                 Int      @id @default(autoincrement())
  name               String
  code               String   @unique
  materialId         Int?     @map("materialId")
  productColorId     Int?     @map("productColorId")
  productVariationId Int?     @map("productVariationId")
  category           String?
  price              Decimal? @db.Decimal(15, 2)
  qtyOnHand          Int      @default(0) @map("qtyOnHand")
  unit               String   @default("pcs")
  description        String?
  defaultTarget      Int      @default(0) @map("defaultTarget")
  isActive           Boolean  @default(true) @map("isActive")
  createdAt          DateTime @default(now()) @map("createdAt")
  updatedAt          DateTime @updatedAt @map("updatedAt")

  // Relations
  baseMaterial              Material?               @relation(fields: [materialId], references: [id])
  productColor              ProductColour?          @relation(fields: [productColorId], references: [id])
  productVariation          ProductVariation?       @relation(fields: [productVariationId], references: [id])
  orderProducts             OrderProduct[]
  recurringPlans            RecurringPlan[]
  photos                    ProductPhoto[]
  individualProgressReports ProgressReport[]        @relation("ProductProgressReports")
  productProgressReports    ProductProgressReport[]

  @@map("products")
}

model Order {
  id              Int         @id @default(autoincrement())
  orderNumber     String      @unique @map("orderNumber")
  status          OrderStatus @default(CREATED)
  targetPcs       Int         @default(0) @map("targetPcs")
  completedPcs    Int         @default(0) @map("completedPcs")
  customerNote    String?     @map("customerNote")
  dueDate         DateTime?   @map("dueDate")
  userId          Int         @map("userId")
  workerId        Int?        @map("workerId")
  workerContactId Int?        @map("workerContactId")
  description     String?
  priority        Priority    @default(MEDIUM)
  isActive        Boolean     @default(true) @map("isActive")
  createdAt       DateTime    @default(now()) @map("createdAt")
  updatedAt       DateTime    @updatedAt @map("updatedAt")

  // Relations
  user              User                    @relation("UserOrders", fields: [userId], references: [id])
  worker            User?                   @relation("WorkerOrders", fields: [workerId], references: [id])
  workerContact     Contact?                @relation("WorkerContactOrders", fields: [workerContactId], references: [id])
  orderProducts     OrderProduct[]
  materialMovements MaterialMovement[]
  progressReports   ProgressReport[]
  orderLink         OrderLink?
  shipment          Shipment?
  statusChanges     StatusChange[]
  purchaseAlerts    MaterialPurchaseAlert[]
  contactNotes      ContactNote[]

  @@map("orders")
}

model OrderProduct {
  id           Int                @id @default(autoincrement())
  orderId      Int                @map("orderId")
  productId    Int                @map("productId")
  quantity     Int                @default(1)
  unitPrice    Decimal?           @map("unitPrice") @db.Decimal(15, 2)
  totalPrice   Decimal?           @map("totalPrice") @db.Decimal(15, 2)
  notes        String?
  completedQty Int                @default(0) @map("completedQty")
  status       OrderProductStatus @default(PENDING)
  createdAt    DateTime           @default(now()) @map("createdAt")
  updatedAt    DateTime           @updatedAt @map("updatedAt")

  // Relations
  order                     Order                   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product                   Product                 @relation(fields: [productId], references: [id])
  individualProgressReports ProgressReport[]        @relation("OrderProductProgressReports")
  productProgressReports    ProductProgressReport[]

  @@map("order_products")
}

model MaterialMovement {
  id            Int                  @id @default(autoincrement())
  materialId    Int                  @map("materialId")
  orderId       Int?                 @map("orderId")
  userId        Int                  @map("userId")
  purchaseLogId Int?                 @unique @map("purchaseLogId")
  movementType  MaterialMovementType
  quantity      Decimal              @db.Decimal(10, 3)
  unit          String               @default("pcs")
  costPerUnit   Decimal?             @map("costPerUnit") @db.Decimal(15, 2)
  totalCost     Decimal?             @map("totalCost") @db.Decimal(15, 2)
  notes         String?
  qtyAfter      Decimal              @map("qtyAfter") @db.Decimal(10, 3)
  movementDate  DateTime             @default(now()) @map("movementDate")
  isActive      Boolean              @default(true) @map("isActive")
  createdAt     DateTime             @default(now()) @map("createdAt")
  updatedAt     DateTime             @updatedAt @map("updatedAt")

  // Relations 
  material    Material     @relation(fields: [materialId], references: [id])
  order       Order?       @relation(fields: [orderId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  purchaseLog PurchaseLog? @relation(fields: [purchaseLogId], references: [id])

  @@map("material_movements")
}

model ProgressReport {
  id             Int      @id @default(autoincrement())
  orderId        Int?     @map("orderId")
  orderProductId Int?     @map("orderProductId")
  productId      Int?     @map("productId")
  userId         Int      @map("userId")
  reportText     String   @map("reportText")
  photoPath      String?  @map("photoPath")
  percentage     Int      @default(0)
  createdAt      DateTime @default(now()) @map("createdAt")
  updatedAt      DateTime @updatedAt @map("updatedAt")

  // Relations
  order          Order?                  @relation(fields: [orderId], references: [id])
  orderProduct   OrderProduct?           @relation("OrderProductProgressReports", fields: [orderProductId], references: [id])
  product        Product?                @relation("ProductProgressReports", fields: [productId], references: [id])
  user           User                    @relation(fields: [userId], references: [id])
  productReports ProductProgressReport[]

  @@map("progress_reports")
}

model ProductProgressReport {
  id               Int       @id @default(autoincrement())
  progressReportId Int       @map("progressReportId")
  productId        Int       @map("productId")
  orderProductId   Int?      @map("orderProductId")
  itemsCompleted   Int       @default(0) @map("itemsCompleted")
  itemsTarget      Int       @default(0) @map("itemsTarget")
  status           String    @default("in_progress")
  notes            String?
  completionDate   DateTime? @map("completionDate")
  createdAt        DateTime  @default(now()) @map("createdAt")
  updatedAt        DateTime  @updatedAt @map("updatedAt")

  // Relations
  progressReport ProgressReport         @relation(fields: [progressReportId], references: [id], onDelete: Cascade)
  product        Product                @relation(fields: [productId], references: [id])
  orderProduct   OrderProduct?          @relation(fields: [orderProductId], references: [id])
  photos         ProductProgressPhoto[]

  @@map("product_progress_reports")
}

model ProductProgressPhoto {
  id                      Int      @id @default(autoincrement())
  productProgressReportId Int      @map("productProgressReportId")
  photoPath               String   @map("photoPath")
  thumbnailPath           String?  @map("thumbnailPath")
  description             String?
  uploadDate              DateTime @default(now()) @map("uploadDate")
  fileSize                Int?     @map("fileSize")
  mimeType                String?  @map("mimeType")
  isActive                Boolean  @default(true) @map("isActive")
  createdAt               DateTime @default(now()) @map("createdAt")
  updatedAt               DateTime @updatedAt @map("updatedAt")

  // Relations
  productProgressReport ProductProgressReport @relation(fields: [productProgressReportId], references: [id], onDelete: Cascade)

  @@map("product_progress_photos")
}

model RemainingMaterial {
  id         Int      @id @default(autoincrement())
  materialId Int      @map("materialId")
  quantity   Decimal  @db.Decimal(10, 3)
  unit       String   @default("pcs")
  notes      String?
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updatedAt")

  // Relations
  material Material @relation(fields: [materialId], references: [id])

  @@map("remaining_materials")
}

model Inventaris {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  Int      @default(0)
  unit      String   @default("pcs")
  notes     String?
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  @@map("inventaris")
}

model OrderLink {
  id        Int       @id @default(autoincrement())
  orderId   Int       @unique @map("orderId")
  userId    Int       @map("userId")
  linkToken String    @unique @map("linkToken")
  isActive  Boolean   @default(true) @map("isActive")
  expiresAt DateTime? @map("expiresAt")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])

  @@map("order_links")
}

model Shipment {
  id             Int            @id @default(autoincrement())
  orderId        Int            @unique @map("orderId")
  trackingNumber String?        @map("trackingNumber")
  carrier        String?
  shippedDate    DateTime?      @map("shippedDate")
  deliveredDate  DateTime?      @map("deliveredDate")
  status         ShipmentStatus @default(PENDING)
  notes          String?
  createdAt      DateTime       @default(now()) @map("createdAt")
  updatedAt      DateTime       @updatedAt @map("updatedAt")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

model RecurringPlan {
  id        Int       @id @default(autoincrement())
  productId Int       @map("productId")
  quantity  Int       @default(1)
  frequency String    @default("monthly")
  isActive  Boolean   @default(true) @map("isActive")
  nextDue   DateTime? @map("nextDue")
  createdAt DateTime  @default(now()) @map("createdAt")
  updatedAt DateTime  @updatedAt @map("updatedAt")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("recurring_plans")
}

model StatusChange {
  id         Int         @id @default(autoincrement())
  orderId    Int         @map("orderId")
  changedBy  Int         @map("changedBy")
  fromStatus OrderStatus @map("fromStatus")
  toStatus   OrderStatus @map("toStatus")
  reason     String?
  notes      String?
  createdAt  DateTime    @default(now()) @map("createdAt")
  updatedAt  DateTime    @updatedAt @map("updatedAt")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user  User  @relation("StatusChangedBy", fields: [changedBy], references: [id])

  @@map("status_changes")
}

model ProductColour {
  id        Int      @id @default(autoincrement())
  colorName String   @map("colorName")
  colorCode String?  @map("colorCode")
  isActive  Boolean  @default(true) @map("isActive")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  // Relations
  products Product[]

  @@map("product_colours")
}

model ProductVariation {
  id              Int      @id @default(autoincrement())
  variationType   String   @map("variationType")
  variationValue  String   @map("variationValue")
  priceAdjustment Decimal? @map("priceAdjustment") @db.Decimal(15, 2)
  isActive        Boolean  @default(true) @map("isActive")
  createdAt       DateTime @default(now()) @map("createdAt")
  updatedAt       DateTime @updatedAt @map("updatedAt")

  // Relations
  products Product[]

  @@map("product_variations")
}

model ProductPhoto {
  id            Int      @id @default(autoincrement())
  productId     Int      @map("productId")
  photoPath     String   @map("photoPath")
  thumbnailPath String?  @map("thumbnailPath")
  description   String?
  isPrimary     Boolean  @default(false) @map("isPrimary")
  sortOrder     Int      @default(0) @map("sortOrder")
  fileSize      Int?     @map("fileSize")
  mimeType      String?  @map("mimeType")
  isActive      Boolean  @default(true) @map("isActive")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_photos")
}

model MaterialPurchaseAlert {
  id                Int                       @id @default(autoincrement())
  materialId        Int                       @map("materialId")
  orderId           Int?                      @map("orderId")
  alertType         MaterialPurchaseAlertType
  requiredQuantity  Decimal                   @map("requiredQuantity") @db.Decimal(10, 3)
  currentStock      Decimal                   @map("currentStock") @db.Decimal(10, 3)
  urgencyLevel      UrgencyLevel              @default(MEDIUM) @map("urgencyLevel")
  message           String
  status            AlertStatus               @default(ACTIVE)
  createdBy         Int                       @map("createdBy")
  resolvedBy        Int?                      @map("resolvedBy")
  resolvedAt        DateTime?                 @map("resolvedAt")
  resolution        String?
  estimatedCost     Decimal?                  @map("estimatedCost") @db.Decimal(15, 2)
  suggestedSupplier String?                   @map("suggestedSupplier")
  createdAt         DateTime                  @default(now()) @map("createdAt")
  updatedAt         DateTime                  @updatedAt @map("updatedAt")

  // Relations
  material       Material @relation(fields: [materialId], references: [id])
  order          Order?   @relation(fields: [orderId], references: [id])
  createdByUser  User     @relation("AlertCreatedBy", fields: [createdBy], references: [id])
  resolvedByUser User?    @relation("AlertResolvedBy", fields: [resolvedBy], references: [id])

  @@map("material_purchase_alerts")
}

model PurchaseLog {
  id               Int            @id @default(autoincrement())
  materialId       Int            @map("materialId")
  supplier         String
  quantity         Decimal        @db.Decimal(10, 3)
  unit             String         @default("pcs")
  pricePerUnit     Decimal        @default(0) @db.Decimal(15, 2)
  totalCost        Decimal        @map("totalCost") @db.Decimal(15, 2)
  purchaseDate     DateTime       @map("purchaseDate")
  invoiceNumber    String?        @map("invoiceNumber")
  receiptPath      String?        @map("receiptPath")
  notes            String?
  status           PurchaseStatus @default(PENDING)
  deliveryDate     DateTime?      @map("deliveryDate")
  receivedQuantity Decimal?       @map("receivedQuantity") @db.Decimal(10, 3)
  isActive         Boolean        @default(true) @map("isActive")
  createdAt        DateTime       @default(now()) @map("createdAt")
  updatedAt        DateTime       @updatedAt @map("updatedAt")

  // Relations
  material     Material          @relation(fields: [materialId], references: [id])
  movement     MaterialMovement?
  contactNotes ContactNote[]

  @@map("purchase_logs")
}

model Contact {
  id            Int         @id @default(autoincrement())
  name          String
  phone         String?
  whatsappPhone String?     @map("whatsappPhone")
  email         String?
  address       String?
  contactType   ContactType
  company       String?
  notes         String?
  isActive      Boolean     @default(true) @map("isActive")
  createdAt     DateTime    @default(now()) @map("createdAt")
  updatedAt     DateTime    @updatedAt @map("updatedAt")

  // Relations
  workerOrders Order[]       @relation("WorkerContactOrders")
  contactNotes ContactNote[]

  @@map("contacts")
}

model ContactNote {
  id             Int       @id @default(autoincrement())
  contactId      Int       @map("contactId")
  orderId        Int?      @map("orderId")
  purchaseLogId  Int?      @map("purchaseLogId")
  createdBy      Int       @map("createdBy")
  noteType       NoteType
  subject        String?
  content        String
  followUpDate   DateTime? @map("followUpDate")
  isImportant    Boolean   @default(false) @map("isImportant")
  tags           String?
  attachmentPath String?   @map("attachmentPath")
  isActive       Boolean   @default(true) @map("isActive")
  createdAt      DateTime  @default(now()) @map("createdAt")
  updatedAt      DateTime  @updatedAt @map("updatedAt")

  // Relations
  contact       Contact      @relation(fields: [contactId], references: [id])
  order         Order?       @relation(fields: [orderId], references: [id])
  purchaseLog   PurchaseLog? @relation(fields: [purchaseLogId], references: [id])
  createdByUser User         @relation("ContactNoteCreatedBy", fields: [createdBy], references: [id])

  @@map("contact_notes")
}

// Enums
enum UserRole {
  ADMIN    @map("admin")
  OPERATOR @map("operator")
}

enum OrderStatus {
  CREATED       @map("created")
  NEED_MATERIAL @map("need material")
  CONFIRMED     @map("confirmed")
  PROCESSING    @map("processing")
  COMPLETED     @map("completed")
  SHIPPED       @map("shipped")
  DELIVERED     @map("delivered")
  CANCELLED     @map("cancelled")
}

enum OrderProductStatus {
  PENDING     @map("pending")
  IN_PROGRESS @map("in_progress")
  COMPLETED   @map("completed")
  CANCELLED   @map("cancelled")
}

enum Priority {
  LOW    @map("low")
  MEDIUM @map("medium")
  HIGH   @map("high")
  URGENT @map("urgent")
}

enum MaterialMovementType {
  IN     @map("in")
  OUT    @map("out")
  ADJUST @map("adjust")
}

enum ShipmentStatus {
  PENDING   @map("pending")
  SHIPPED   @map("shipped")
  DELIVERED @map("delivered")
  CANCELLED @map("cancelled")
}

enum MaterialPurchaseAlertType {
  LOW_STOCK      @map("low_stock")
  OUT_OF_STOCK   @map("out_of_stock")
  UPCOMING_NEED  @map("upcoming_need")
  EMERGENCY_NEED @map("emergency_need")
}

enum UrgencyLevel {
  LOW      @map("low")
  MEDIUM   @map("medium")
  HIGH     @map("high")
  CRITICAL @map("critical")
}

enum AlertStatus {
  ACTIVE    @map("active")
  RESOLVED  @map("resolved")
  DISMISSED @map("dismissed")
}

enum PurchaseStatus {
  PENDING   @map("pending")
  ORDERED   @map("ordered")
  RECEIVED  @map("received")
  CANCELLED @map("cancelled")
}

enum ContactType {
  CUSTOMER @map("customer")
  SUPPLIER @map("supplier")
  WORKER   @map("worker")
  OTHER    @map("other")
}

enum NoteType {
  GENERAL   @map("general")
  FOLLOW_UP @map("follow_up")
  COMPLAINT @map("complaint")
  ORDER     @map("order")
  PURCHASE  @map("purchase")
  PAYMENT   @map("payment")
}
